<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="2">
            </MudItem>
            <MudItem xs="8">
                <MudText>Id: @book.Id</MudText>
                <br />
                <MudText>Title: @book.Title</MudText>
                <br />
                <MudText>Author: @book.Author</MudText>
                <br />
                <MudText>Category name: @book.CategoryName</MudText>
            </MudItem>
            <MudItem xs="2">
            </MudItem>
        </MudGrid>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    @inject ILocalStorageService LocalStorage
    @inject ISnackbar Snackbar
    @inject NavigationManager navigation

    @inject HttpClient httpClient
    [Parameter]
    public string Id { get; set; }

    BookDTO book = new BookDTO();

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");

        if (string.IsNullOrEmpty(token))
        {
            Snackbar.Add("User is not authenticated", Severity.Error);
            return;
        }

        var request = new HttpRequestMessage(HttpMethod.Get, Helper.URL + "book/" + Id);
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.SendAsync(request);

        if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            navigation.NavigateTo("/login");
        }
        else if (response.IsSuccessStatusCode)
        {
            book = await response.Content.ReadFromJsonAsync<BookDTO>();
        }
    }
}
